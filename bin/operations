#!/bin/sh
source ../cluster/config.properties
JQ="${OPENSHIFT_SP_DIR}bin/jq"
function authenticate(){
    curl -s -X POST "$OPENSTACK_AUTH_URL"/tokens \
                    -H "Content-Type: application/json" \
                    -d @"${OPENSHIFT_SP_DIR}"cluster/json/authenticate.json \
                    > "${OPENSHIFT_SP_DIR}"tmp/response_authenticate.json

    # parse response and save token to appropriate variable
    TOKEN=`cat ${OPENSHIFT_SP_DIR}tmp/response_authenticate.json | ${JQ} -r '.access.token.id'`
    echo "Your token is: $TOKEN"
    OPENSTACK_TOKEN=${TOKEN}
    echo "Token is saved in OPENSTACK_TOKEN env variable: $OPENSTACK_TOKEN" >> ${OPENSHIFT_SP_LOG}
}

function deleteCluster(){
    if [ ! -z "$1"  -a -f "$1" ]
    then
        source $1
    fi

    authenticate

    getClusterIdByName

    echo "Deleting cluster with id: $SPARK_CLUSTER_ID"

    curl -s -X DELETE "$SAHARA_URL/clusters/$SPARK_CLUSTER_ID"  \
                    -H "X-Auth-Token: ${OPENSTACK_TOKEN}" \
                    -w "%{http_code}" \
                    > "${OPENSHIFT_SP_DIR}"/tmp/response_delete_cluster.code

    DELETE_RESPONSE_CODE=`cat "${OPENSHIFT_SP_DIR}"/tmp/response_delete_cluster.code`
    echo "Cluster with id: $SPARK_CLUSTER_ID removed with code $DELETE_RESPONSE_CODE"
    echo "Cluster with id: $SPARK_CLUSTER_ID removed with code $DELETE_RESPONSE_CODE"  >> ${OPENSHIFT_SP_LOG}
}

function createCluster(){
    if [ ! -z "$1"  -a -f "$1" ]
    then
        source $1
    fi

    authenticate

    curl -s -X GET "$SAHARA_URL/cluster-templates" \
                    -H "Content-Type: application/json" \
                    -H "X-Auth-Token: ${OPENSTACK_TOKEN}" \
                    > "${OPENSHIFT_SP_DIR}"tmp/response_list_clusters_template.json

    SPARK_CLUSTER_TEMPLATE_ID=`cat ${OPENSHIFT_SP_DIR}tmp/response_list_clusters_template.json |
            ${JQ} '.cluster_templates' |
            ${JQ} -r "map(select(.name==\"${SPARK_CLUSTER_TEMPLATE_NAME}\"))[0].id" `

    echo "Cluster template with name ${SPARK_CLUSTER_TEMPLATE_NAME} resolved as ${SPARK_CLUSTER_TEMPLATE_ID}"

    check_not_null ${SPARK_CLUSTER_TEMPLATE_ID} SPARK_CLUSTER_TEMPLATE_ID

    cat ${OPENSHIFT_SP_DIR}cluster/json/launch_cluster.json | \
                ${JQ} ".cluster_template_id = \"${SPARK_CLUSTER_TEMPLATE_ID}\"" | \
                ${JQ} ".user_keypair_id = \"${SPARK_USER_KEY_PAIR}\"" | \
                ${JQ} ".name = \"${SPARK_CLUSTER_NAME}\"" | \
                ${JQ} ".default_image_id = \"${SPARK_DEFAULT_IMAGE_ID}\"" | \
                ${JQ} ".neutron_management_network = \"${NEUTRON_MANAGEMENT_NETWORK}\"" \
                > "${OPENSHIFT_SP_DIR}"/tmp/launch_cluster_resolved.json

    echo `cat "${OPENSHIFT_SP_DIR}"/tmp/launch_cluster_resolved.json`  >> ${OPENSHIFT_SP_LOG}

    echo "Creating cluster from template: ${SPARK_CLUSTER_TEMPLATE_ID}"
    echo "Cluster name: ${SPARK_CLUSTER_NAME}"

    curl -s -X POST "$SAHARA_URL/clusters" \
                    -H "Content-Type: application/json" \
                    -H "X-Auth-Token: ${OPENSTACK_TOKEN}" \
                    -d @"${OPENSHIFT_SP_DIR}"/tmp/launch_cluster_resolved.json \
                        > "${OPENSHIFT_SP_DIR}"/tmp/response_launch_cluster.json


    check_json_errors response_launch_cluster "creating cluster"

    if [ ${ERROR} == 'NAME_ALREADY_EXISTS' ]
    then
        echo "Cluster already exists" >> ${OPENSHIFT_SP_LOG}
        echo "Cluster already exists"

        getClusterIdByName

        echo "Existing cluster ID: ${SPARK_CLUSTER_ID}"

    else
        SPARK_CLUSTER_ID=`cat ${OPENSHIFT_SP_DIR}tmp/response_launch_cluster.json | ${JQ} -r '.cluster.id'`
        echo "Created cluster ID: ${SPARK_CLUSTER_ID}"
    fi

    echo $SPARK_MANAGEMENT_KEY > ${OPENSHIFT_SP_DIR}tmp/SPARK_MANAGEMENT_KEY

    echo "Cluster id: $SPARK_CLUSTER_ID"
    check_not_null $SPARK_CLUSTER_ID SPARK_CLUSTER_ID
}

function getClusterIdByName(){

        curl -s -X GET "$SAHARA_URL/clusters" \
                        -H "Content-Type: application/json" \
                        -H "X-Auth-Token: ${OPENSTACK_TOKEN}" \
                        > "${OPENSHIFT_SP_DIR}"tmp/response_list_clusters_2.json

        SPARK_CLUSTER_ID=`cat ${OPENSHIFT_SP_DIR}tmp/response_list_clusters_2.json |
                ${JQ} '.clusters' |
                ${JQ} -r "map(select(.name==\"${SPARK_CLUSTER_NAME}\"))[0].id" `

}

function deployJob(){
        if [ ! -z "$1"  -a -f "$1" ]
        then
            source $1
        fi

        authenticate

        if [ -f $JOB_BINARY ];
        then
            echo "File $JOB_BINARY exists."

            createJobInternal
            createJobBinary
            createJob
            runJob

        else
           echo "File $JOB_BINARY does not exist."
        fi
}

rawurlencode() {
  local string="${1}"
  local strlen=${#string}
  local encoded=""

  for (( pos=0 ; pos<strlen ; pos++ )); do
     c=${string:$pos:1}
     case "$c" in
        [-_.~a-zA-Z0-9] ) o="${c}" ;;
        * )               printf -v o '%%%02x' "'$c"
     esac
     encoded+="${o}"
  done
  REPLY="${encoded}"   #+or echo the result (EASIER)... or both... :p
}


function createJobInternal() {
   JOB_INTERNAL_NAME="ji-$(cat $JOB_BINARY | md5sum | /bin/cut -f1 -d" ")-$(basename $JOB_BINARY)"
   echo "File name of job binary is '${JOB_INTERNAL_NAME}'."

   rawurlencode "$JOB_INTERNAL_NAME"
   echo "File name will be encoded as '$REPLY'"

   curl -s -X PUT "$SAHARA_URL/job-binary-internals/$REPLY" \
                 -H "X-Auth-Token: ${OPENSTACK_TOKEN}" \
                 -d @"$JOB_BINARY" \
                 > "${OPENSHIFT_SP_DIR}"/tmp/response_create_job_binary_internals.json


   check_json_errors response_create_job_binary_internals "creating job binary internal"
   JOB_INTERNAL_ID=`cat "${OPENSHIFT_SP_DIR}"/tmp/response_create_job_binary_internals.json | ${JQ} -r '.job_binary_internal.id'`

   echo "Created job binary internal id: ${JOB_INTERNAL_ID}"

    if [ ${ERROR} == 'DB_DUPLICATE_ENTRY' ]
    then
        curl -s -X GET "$SAHARA_URL/job-binary-internals" \
                    -H "X-Auth-Token: ${OPENSTACK_TOKEN}" \
                    > "${OPENSHIFT_SP_DIR}"tmp/job_binary_internals_list2.json


        JOB_INTERNAL_ID=`cat ${OPENSHIFT_SP_DIR}tmp/job_binary_internals_list2.json |
                ${JQ} '.binaries' |
                ${JQ} -r "map(select(.name==\"${JOB_INTERNAL_NAME}\"))[0].id"`

        echo "Searched JOB_INTERNAL_ID=${JOB_INTERNAL_ID}"
    fi

    check_not_null $JOB_INTERNAL_ID JOB_INTERNAL_ID
}
function createJobBinary() {
    JOB_BINARY_NAME="jb-$(cat $JOB_BINARY | md5sum | /bin/cut -f1 -d" ")"

    echo "Creating job binary with name ${JOB_BINARY_NAME}"
    cat ${OPENSHIFT_SP_DIR}cluster/json/job_binary.json | \
        ${JQ} ".url = \"internal-db://${JOB_INTERNAL_ID}\"" | \
        ${JQ} ".name = \"${JOB_BINARY_NAME}\"" \
        > "${OPENSHIFT_SP_DIR}"/tmp/job_binary_resolved.json

    curl -s -X POST "$SAHARA_URL/job-binaries" \
                 -H "Content-Type: application/json" \
                 -H "X-Auth-Token: ${OPENSTACK_TOKEN}" \
                 -d @"${OPENSHIFT_SP_DIR}"/tmp/job_binary_resolved.json \
                 > "${OPENSHIFT_SP_DIR}"/tmp/job_binary_response.json

    check_json_errors job_binary_response "creating job-binary"

    JOB_BINARY_ID=`cat "${OPENSHIFT_SP_DIR}"/tmp/job_binary_response.json | ${JQ} -r '.job_binary.id'`

    echo "Created job binary id: ${JOB_BINARY_ID}"

    if [ ${ERROR} == 'DB_DUPLICATE_ENTRY' ]
    then
        curl -s -X GET "$SAHARA_URL/job-binaries" \
                    -H "X-Auth-Token: ${OPENSTACK_TOKEN}" \
                    > "${OPENSHIFT_SP_DIR}"tmp/job-binaries_list.json


        JOB_BINARY_ID=`cat ${OPENSHIFT_SP_DIR}tmp/job-binaries_list.json |
                ${JQ} '.binaries' |
                ${JQ} -r "map(select(.name==\"${JOB_BINARY_NAME}\"))[0].id" `

        echo "Searched JOB_BINARY_ID=${JOB_BINARY_ID}"

    fi
    check_not_null $JOB_BINARY_ID JOB_BINARY_ID
}
function createJob() {

    echo "Creating job..."
    cat ${OPENSHIFT_SP_DIR}cluster/json/job.json | \
        #${JQ} ".libs = [\"${JOB_BINARY_ID}\"]" | \
        ${JQ} ".mains = [\"${JOB_BINARY_ID}\"]" | \
        ${JQ} ".type = \"${JOB_TYPE}\"" | \
        ${JQ} ".name = \"${JOB_NAME}-$(date +%Y-%m-%d__%H_%M_%S)\"" \
        > "${OPENSHIFT_SP_DIR}"/tmp/job_resolved.json

    curl -s -X POST "$SAHARA_URL/jobs" \
                 -H "Content-Type: application/json" \
                 -H "X-Auth-Token: ${OPENSTACK_TOKEN}" \
                 -d @"${OPENSHIFT_SP_DIR}"/tmp/job_resolved.json \
                 > "${OPENSHIFT_SP_DIR}"/tmp/job_response.json

    check_json_errors job_response "creating job"

    JOB_ID=`cat "${OPENSHIFT_SP_DIR}"/tmp/job_response.json | ${JQ} -r '.job.id'`

    echo "Created job with id: ${JOB_ID}"
}

function runJob() {
    echo "Runngin job with id: ${JOB_ID} and type ${JOB_TYPE}"
    case ${JOB_TYPE} in
        Spark )
            runJavaJob ;;
        Java )
            runJavaJob ;;
    esac
}

function runJavaJob() {

            echo "Running java job on cluster ${SPARK_CLUSTER_ID}..."
            cat ${OPENSHIFT_SP_DIR}cluster/json/job_execution_java.json | \
                ${JQ} ".cluster_id = \"${SPARK_CLUSTER_ID}\"" | \
                ${JQ} ".job_configs.configs.\"fs.swift.service.sahara.username\" = \"${fs_swift_service_sahara_username}\"" | \
                ${JQ} ".job_configs.configs.\"fs.swift.service.sahara.password\" = \"${fs_swift_service_sahara_password}\"" | \
                ${JQ} ".job_configs.configs.\"edp.java.main_class\" = \"${edp_java_main_class}\"" \
                > "${OPENSHIFT_SP_DIR}"tmp/run_job_resolved.json

            for ARG in $JOB_ARGS
            do
                cat "${OPENSHIFT_SP_DIR}"tmp/run_job_resolved.json | \
                    ${JQ} ".job_configs.args += [\"${ARG}\"]" \
                    > "${OPENSHIFT_SP_DIR}"tmp/run_job_resolved_t.json

                cat "${OPENSHIFT_SP_DIR}"tmp/run_job_resolved_t.json \
                    > "${OPENSHIFT_SP_DIR}"tmp/run_job_resolved.json
            done

            cat ${OPENSHIFT_SP_DIR}tmp/run_job_resolved.json | ${JQ} "." -C

            curl -s -X POST "$SAHARA_URL/jobs/${JOB_ID}/execute" \
                         -H "Content-Type: application/json" \
                         -H "X-Auth-Token: ${OPENSTACK_TOKEN}" \
                         -d @"${OPENSHIFT_SP_DIR}"/tmp/run_job_resolved.json \
                         > "${OPENSHIFT_SP_DIR}"/tmp/run_job_response.json

           check_json_errors run_job_response "running java job"

           JOB_ID=`cat "${OPENSHIFT_SP_DIR}"/tmp/run_job_response.json | ${JQ} -r '.job_execution.id'`

           echo "Job started with execution id: ${JOB_ID}"
           cat "${OPENSHIFT_SP_DIR}"tmp/run_job_response.json | ${JQ} "." -C
}


function check_json_errors() {

    ERROR=`cat ${OPENSHIFT_SP_DIR}tmp/${1}.json | ${JQ} -r '.error_name?'`
    ERROR_MESSAGE=`cat ${OPENSHIFT_SP_DIR}tmp/${1}.json | ${JQ} -r '.error_message?'`

    if [ ${ERROR} != 'null' ]
    then
        echo "Error [${ERROR}] when ${2}: ${ERROR_MESSAGE}"
    fi
}

function check_not_null() {

    if [ $1 == 'null' ]
    then
        error "Variable ${2} is null"
    fi

}