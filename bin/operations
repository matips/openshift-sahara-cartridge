#!/bin/sh
source ../cluster/config.properties

function authenticate(){
    client_message "Your token is: $OPENSTACK_TOKEN"
    curl -s -X POST "$OPENSTACK_AUTH_URL"/tokens \
                    -H "Content-Type: application/json" \
                    -d @"${OPENSHIFT_SP_DIR}"cluster/json/authenticate.json \
                    > "${OPENSHIFT_SP_DIR}"temp/response_authenticate.json

    # parse response and save token to appropriate variable
    TOKEN=`cat ${OPENSHIFT_SP_DIR}temp/response_authenticate.json | ${OPENSHIFT_SP_DIR}bin/jq -r '.access.token.id'`
    client_message "Your token is: $TOKEN"
    OPENSTACK_TOKEN=${TOKEN}
    echo "Token is saved in OPENSTACK_TOKEN env variable: $OPENSTACK_TOKEN" >> ${OPENSHIFT_SP_LOG}
}

function createMasterNodeGroup(){

    curl -s -X POST "$SAHARA_URL/node-group-templates" \
                    -H "Content-Type: application/json" \
                    -H "X-Auth-Token: $TOKEN" \
                    -d @"${OPENSHIFT_SP_DIR}"/cluster/json/ng-master.json \
                    > "${OPENSHIFT_SP_DIR}"/temp/response_ng-master.json

    SPARK_TEMPLATE_MASTER_ID=`cat ${OPENSHIFT_SP_DIR}temp/response_ng-master.json | ${OPENSHIFT_SP_DIR}bin/jq -r '.node_group_template.id'`

    echo "Master node template id: $SPARK_TEMPLATE_MASTER_ID" >> ${OPENSHIFT_SP_LOG}
}

function createSlaveNodeGroup(){
    curl -s -X POST "$SAHARA_URL/node-group-templates" \
                    -H "Content-Type: application/json" \
                    -H "X-Auth-Token: ${OPENSTACK_TOKEN}" \
                    -d @"${OPENSHIFT_SP_DIR}"/cluster/json/ng-slave.json \
                    > "${OPENSHIFT_SP_DIR}"/temp/response_ng-slave.json

    SPARK_TEMPLATE_SLAVE_ID=`cat ${OPENSHIFT_SP_DIR}temp/response_ng-slave.json | ${OPENSHIFT_SP_DIR}bin/jq -r '.node_group_template.id'`

    echo "Slave node template id: $SPARK_TEMPLATE_SLAVE_ID" >> ${OPENSHIFT_SP_LOG}
}

function createClusterTemplate(){
    authenticate

    cat  "${OPENSHIFT_SP_DIR}"/cluster/json/cluster_basic.json | \
               ${OPENSHIFT_SP_DIR}bin/jq ".node_groups[0].node_group_template_id = \"${SPARK_TEMPLATE_MASTER_ID}\"" | \
               ${OPENSHIFT_SP_DIR}bin/jq ".node_groups[1].node_group_template_id = \"${SPARK_TEMPLATE_SLAVE_ID}\"" | \
               ${OPENSHIFT_SP_DIR}bin/jq ".node_groups[1].count = \"${WORKERS_COUNT}\"" \
               > ${OPENSHIFT_SP_DIR}/temp/cluster_basic_resolved.json

    curl -s -X POST "$SAHARA_URL/cluster-templates" \
                    -H "Content-Type: application/json" \
                    -H "X-Auth-Token: ${OPENSTACK_TOKEN}" \
                    -d @"${OPENSHIFT_SP_DIR}"/temp/cluster_basic_resolved.json \
                    > "${OPENSHIFT_SP_DIR}"/temp/response_cluster_basic.json

    SPARK_CLUSTER_TEMPLATE_ID=`cat ${OPENSHIFT_SP_DIR}temp/response_cluster_basic.json | ${OPENSHIFT_SP_DIR}bin/jq -r '.cluster_template.id'`

    echo "Cluster template id: $SPARK_CLUSTER_TEMPLATE_ID" >> ${OPENSHIFT_SP_LOG}
}

function createCluster(){
    if [ ! -z "$1"  -a -f "$1" ]
    then
        source $1
    fi

    authenticate

    cat ${OPENSHIFT_SP_DIR}cluster/json/launch_cluster.json | \
                ${OPENSHIFT_SP_DIR}bin/jq ".cluster_template_id = \"${SPARK_CLUSTER_TEMPLATE_ID}\"" | \
                ${OPENSHIFT_SP_DIR}bin/jq ".name = \"${SPARK_CLUSTER_NAME}\"" \
                > "${OPENSHIFT_SP_DIR}"/temp/launch_cluster_resolved.json

    echo `cat "${OPENSHIFT_SP_DIR}"/temp/launch_cluster_resolved.json`  >> ${OPENSHIFT_SP_LOG}

    client_message "Creating cluster from template: ${SPARK_CLUSTER_TEMPLATE_ID}"
    client_message "Cluster name: ${SPARK_CLUSTER_NAME}"

    curl -s -X POST "$SAHARA_URL/clusters" \
                    -H "Content-Type: application/json" \
                    -H "X-Auth-Token: ${OPENSTACK_TOKEN}" \
                    -d @"${OPENSHIFT_SP_DIR}"/temp/launch_cluster_resolved.json \
                    > "${OPENSHIFT_SP_DIR}"/temp/response_launch_cluster.json

    echo `cat "${OPENSHIFT_SP_DIR}"/temp/response_launch_cluster.json`  >> ${OPENSHIFT_SP_LOG}

    ERROR=`cat ${OPENSHIFT_SP_DIR}temp/response_launch_cluster.json | ${OPENSHIFT_SP_DIR}bin/jq -r '.error_name?'`
    ERROR_MESSAGE=`cat ${OPENSHIFT_SP_DIR}temp/response_launch_cluster.json | ${OPENSHIFT_SP_DIR}bin/jq -r '.error_message?'`

    if [ ${ERROR} != 'null' ]
    then
        client_message "Error when crating cluster: ${ERROR_MESSAGE}"
    fi

    if [ ${ERROR} == 'NAME_ALREADY_EXISTS' ]
    then
        echo "Cluster already exists" >> ${OPENSHIFT_SP_LOG}
        client_message "Cluster already exists"

        curl -s -X GET "$SAHARA_URL/clusters" \
                        -H "Content-Type: application/json" \
                        -H "X-Auth-Token: ${OPENSTACK_TOKEN}" \
                        > "${OPENSHIFT_SP_DIR}"/temp/response_list_clusters.json

        SPARK_CLUSTER_ID=`cat ${OPENSHIFT_SP_DIR}temp/response_list_clusters.json |
                ${OPENSHIFT_SP_DIR}/bin/jq '.clusters' |
                ${OPENSHIFT_SP_DIR}/bin/jq 'map(select(.name=="mp-cluster-36"))[0].id' |
                cut -d "\"" -f2`


        client_message "Existing cluster ID: ${SPARK_CLUSTER_ID}"

    else
        SPARK_CLUSTER_ID=`cat ${OPENSHIFT_SP_DIR}temp/response_launch_cluster.json | ${OPENSHIFT_SP_DIR}bin/jq -r '.cluster.id'`
        client_message "Created cluster ID: ${SPARK_CLUSTER_ID}"
    fi

    echo $SPARK_MANAGEMENT_KEY > ${OPENSHIFT_SP_DIR}temp/SPARK_MANAGEMENT_KEY

    echo "Cluster id: $SPARK_CLUSTER_ID" >> ${OPENSHIFT_SP_LOG}
}